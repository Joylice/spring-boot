buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'


version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
sourceSets {
    main {
        java.srcDirs = ["src/main/java", "src/main/gen"]
        resources {
            exclude '**/node_modules'
        }
    }
}

configurations {
    mybatisGenerator
}

dependencies {

    //辅助软件开发的工具包
    compile("org.springframework.boot:spring-boot-devtools")
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude(group: 'org.slf4j')
    }
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    runtime('mysql:mysql-connector-java')
    compile('org.springframework.boot:spring-boot-starter-security')
    //通用Mapper依赖的jar
    compile('tk.mybatis:mapper:3.3.9')
    compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.1.1')
    //在MBG工作的时候，需要额外加载的依赖包
    mybatisGenerator("org.mybatis.generator:mybatis-generator-core:1.3.2")
    mybatisGenerator("tk.mybatis:mapper:3.3.9")
    mybatisGenerator("mysql:mysql-connector-java")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

/**
 * 参考
 * https://docs.gradle.org/current/userguide/ant.html
 * http://wiki.jikexueyuan.com/project/gradle-2-user-guide/using-ant-from-gradle.html
 * 理解
 */
task mybatisGenerator_core << {
    def moduleName = name.substring(name.lastIndexOf("_") + 1, name.length())
    def properties = new Properties()
    file("src/main/resources/application.properties").withInputStream {
        inputStream -> properties.load(inputStream)
    }
    ant.properties["driverClass"] = properties.getProperty("spring.datasource.driver")
    ant.properties["connectionUrl"] = properties.getProperty("spring.datasource.url")
    ant.properties["username"] = properties.getProperty("spring.datasource.username")
    ant.properties["password"] = properties.getProperty("spring.datasource.password")
    ant.properties["src_main_java"] = sourceSets.main.java.srcDirs[0].path
    ant.properties["src_main_gen"] = sourceSets.main.java.srcDirs[1].path
    ant.properties["module_name"] = moduleName
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(
            overwrite: true, configfile: 'src/main/resources/mybatis-generator-config/' + moduleName + '.xml', verbose: true
    ) {
        propertyset {
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionUrl')
            propertyref(name: 'username')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_gen')
            propertyref(name: 'module_name')
        }
    }
}
